/*
 * Temperature Sensor API HTTP(S)-JSON
 * This is a simple API for accessing temperature sensor data.   Producer: The producer in this context is the temperature sensor along with its hosting system.  - GET /units: This endpoint returns a list of supported temperature units.  - GET /temperature: This endpoint provides the current temperature reading and associated metadata.  - GET /temperature/history: This endpoint provides historical temperature readings.  Consumer: The consumer is any application or system that needs to retrieve temperature data from the producer.   - GET /units: A consumer would make a GET request to this endpoint to find out what units of temperature the producer supports.  - GET /temperature: The consumer retrieves the current temperature reading and metadata by making a GET request to this endpoint.  - GET /temperature/history: The consumer retrieves historical temperature readings by making a GET request to this endpoint.  Procedure: Here is a typical interaction between a producer and a consumer:  - The consumer system sends a GET request to the /units endpoint. The producer system receives the request and responds with a list of supported temperature units. - The consumer system sends a GET request to the /temperature endpoint. The producer system receives the request and responds with the current temperature reading and related metadata. - The consumer system sends a GET request to the /temperature/history endpoint. The producer system receives the request and responds with the historical temperature readings. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package se.sinetiq.core.demo.api.client;

import java.io.IOException;

import java.util.Map;
import java.util.List;

/**
 * Callback for asynchronous API call.
 *
 * @param <T> The return type
 */
public interface ApiCallback<T> {
    /**
     * This is called when the API call fails.
     *
     * @param e The exception causing the failure
     * @param statusCode Status code of the response if available, otherwise it would be 0
     * @param responseHeaders Headers of the response if available, otherwise it would be null
     */
    void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders);

    /**
     * This is called when the API call succeeded.
     *
     * @param result The result deserialized from response
     * @param statusCode Status code of the response
     * @param responseHeaders Headers of the response
     */
    void onSuccess(T result, int statusCode, Map<String, List<String>> responseHeaders);

    /**
     * This is called when the API upload processing.
     *
     * @param bytesWritten bytes Written
     * @param contentLength content length of request body
     * @param done write end
     */
    void onUploadProgress(long bytesWritten, long contentLength, boolean done);

    /**
     * This is called when the API download processing.
     *
     * @param bytesRead bytes Read
     * @param contentLength content length of the response
     * @param done Read end
     */
    void onDownloadProgress(long bytesRead, long contentLength, boolean done);
}
